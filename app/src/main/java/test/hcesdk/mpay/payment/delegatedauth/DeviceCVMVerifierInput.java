package test.hcesdk.mpay.payment.delegatedauth;import android.os.CancellationSignal;import android.text.TextUtils;import android.util.Log;import com.gemalto.mfs.mwsdk.cdcvm.DeviceCVMCancellationSignal;import com.gemalto.mfs.mwsdk.cdcvm.DeviceCVMVerifier;import com.gemalto.mfs.mwsdk.payment.CHVerificationMethod;public class DeviceCVMVerifierInput {    private static final String TAG = DeviceCVMVerifierInput.class.getName();    private CharSequence subtitle;    private CharSequence title;    private CharSequence negativeButtonText;    private CharSequence description;    private CancellationSignal qCancellationSignal;    private androidx.core.os.CancellationSignal oCancellationSignal;    public DeviceCVMVerifierInput(CharSequence title, CharSequence subtitle, CharSequence description, CharSequence negativeButtonText) {        Log.d(TAG, "DeviceCVMVerifierInput constructor");        if(TextUtils.isEmpty(title) || TextUtils.isEmpty(subtitle) || TextUtils.isEmpty(description) || TextUtils.isEmpty(negativeButtonText)) {            throw new IllegalArgumentException("title, subtitle, description or negativeButtonText can not be null or empty");        }        this.title = title;        this.subtitle = subtitle;        this.description = description;        this.negativeButtonText = negativeButtonText;        qCancellationSignal = new CancellationSignal();        oCancellationSignal = new androidx.core.os.CancellationSignal();    }    /**     * Returns the {@link DeviceCVMCancellationSignal} created for this {@link com.gemalto.mfs.mwsdk.cdcvm.DeviceCVMVerifierInput},     * which can be used to cancel the authentication operation started by     * {@link DeviceCVMVerifier#startAuthentication(com.gemalto.mfs.mwsdk.cdcvm.DeviceCVMVerifierInput)} in the     * case of {@link CHVerificationMethod#BIOMETRICS BIOMETRICS} as {@link CHVerificationMethod}.     */    public CancellationSignal getDeviceCVMCancellationSignalQ() {        Log.d(TAG, "DeviceCVMVerifierInput getDeviceCVMCancellationSignal");        return qCancellationSignal;    }    public androidx.core.os.CancellationSignal getDeviceCVMCancellationSignalO() {        Log.d(TAG, "DeviceCVMVerifierInput getDeviceCVMCancellationSignal");        return oCancellationSignal;    }    /**     * Returns the <code>title</code> set in the constructor.     */    public CharSequence getTitle() {        Log.d(TAG, "DeviceCVMVerifierInput getTitle");        return title;    }    /**     * Returns the <code>description</code> set in the constructor.     */    public CharSequence getDescription() {        Log.d(TAG, "DeviceCVMVerifierInput getDescription");        return description;    }    /**     * Returns the <code>subtitle</code> set in the constructor.     */    public CharSequence getSubtitle() {        Log.d(TAG, "DeviceCVMVerifierInput getSubtitle");        return subtitle;    }    /**     * Returns the <code>negative button text</code> set in the constructor.     */    public CharSequence getNegativeButtonText() {        Log.d(TAG, "DeviceCVMVerifierInput getNegativeButtonText");        return negativeButtonText;    }}